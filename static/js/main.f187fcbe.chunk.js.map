{"version":3,"sources":["Algorithms/BubbleSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/HeapSort.js","Algorithms/none.js","index.js"],"names":["swap","arr","i","j","temp","BubbleSort","array","position","steps","colors","colorKey","length","slice","push","Array","fill","recursive","left","right","middle","parseInt","merge","l","m","r","n1","n2","L","R","k","mergeSort","items","leftIndex","rightIndex","the_sort_itself","index","pivot","Math","floor","partition","QuickSort","console","log","heapify","n","largest","HeapSort","none","Page","React","Component","BarGraph","props","ALGORITHMS","MergeSort","componentDidMount","resetArray","getInt","min","max","random","clearTimeouts","clearColorKey","count","state","setState","currentStep","generateSteps","algorithm","handleStart","alg","timeouts","timeout","setTimeout","delay","forEach","clearTimeout","blank","this","className","style","width","margin","background","top","height","padding","align","boxShadow","onClick","borderLeft","borderBottom","map","value","idx","backgroundColor","display","fontFamily","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f187fcbe.chunk.js","sourcesContent":["  const BubbleSort = (array, position, steps, colors) => {\r\n\tlet colorKey = colors[colors.length - 1].slice();\r\n\r\n\tfor (let i = 0; i < array.length - 1; i++) {\r\n\t\tfor (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                array = swap (array, j, j + 1)\r\n            }\r\n            steps.push(array.slice());\r\n            colorKey[j] = 1;\r\n            colorKey[j + 1] = 1;\r\n            colors.push(colorKey.slice());\r\n            colorKey[j] = 0;\r\n            colorKey[j + 1] = 0;\r\n        }\r\n        colorKey[array.length - 1 - i] = 2;\r\n        steps.push(array.slice());\r\n        colors.push(colorKey.slice());\r\n\t}\r\n    colors[colors.length - 1] = new Array(array.length).fill(2);\r\n    return;\r\n};\r\n\r\nconst swap = (arr, i, j) => {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n    return arr;\r\n}\r\n\r\nexport default BubbleSort;","//SOURCE of algorithm: https://www.geeksforgeeks.org/merge-sort/\r\n\r\nconst mergeSort = (array, position, steps, colors) => {\r\n  recursive(array, 0, array.length-1, steps, colors);\r\n  colors[colors.length - 1] = new Array(array.length).fill(2);\r\n};\r\n\r\nconst recursive = (array, left, right, steps, colors) => { \r\n  let colorKey = colors[colors.length - 1].slice();\r\n\r\n  if (left>=right){\r\n    return;\r\n  }\r\n\r\n  var middle =left + parseInt((right-left)/2);\r\n  recursive(array, left, middle, steps, colors);\r\n    steps.push(array.slice());\r\n    colorKey[left] = 1;\r\n    colorKey[middle] = 1;\r\n    colors.push(colorKey.slice());\r\n    colorKey[left] = 0;\r\n    colorKey[middle] = 0;\r\n  recursive(array, middle+1, right, steps, colors);\r\n    steps.push(array.slice());\r\n    colorKey[middle+1] = 1;\r\n    colorKey[right] = 1;\r\n    colors.push(colorKey.slice());\r\n    colorKey[middle+1] = 0;\r\n    colorKey[right] = 0;\r\n  merge(array, left, middle, right, steps, colors);\r\n    steps.push(array.slice());\r\n    colorKey[left] = 1;\r\n    colorKey[middle] = 1;\r\n    colorKey[right] = 1;\r\n    colors.push(colorKey.slice());\r\n    colorKey[left] = 0;\r\n    colorKey[middle] = 0;\r\n    colorKey[right] = 0;\r\n}\r\n\r\nconst merge = (arr, l, m ,r, steps, colors) => {\r\n  let colorKey = colors[colors.length - 1].slice();\r\n  var n1 = m - l + 1;\r\n  var n2 = r - m;\r\n\r\n  // Create temp arrays\r\n  var L = new Array(n1); \r\n  var R = new Array(n2);\r\n\r\n  // Copy data to temp arrays L[] and R[]\r\n  for (var i = 0; i < n1; i++)\r\n      L[i] = arr[l + i];\r\n  for (var j = 0; j < n2; j++)\r\n      R[j] = arr[m + 1 + j];\r\n\r\n  // Merge the temp arrays back into arr[l..r]\r\n\r\n  // Initial index of first subarray\r\n  var i = 0;\r\n\r\n  // Initial index of second subarray\r\n  var j = 0;\r\n\r\n  // Initial index of merged subarray\r\n  var k = l;\r\n\r\n  while (i < n1 && j < n2) {\r\n      if (L[i] <= R[j]) {\r\n          arr[k] = L[i];\r\n          i++;\r\n      }\r\n      else {\r\n          arr[k] = R[j];\r\n          j++;\r\n      }\r\n\r\n      k++;\r\n  }\r\n\r\n  // Copy the remaining elements of\r\n  // L[], if there are any\r\n  while (i < n1) {\r\n      arr[k] = L[i];\r\n      i++;\r\n      k++;\r\n  }\r\n\r\n  // Copy the remaining elements of\r\n  // R[], if there are any\r\n  while (j < n2) {\r\n      arr[k] = R[j];\r\n      j++;\r\n      k++;\r\n  }\r\n};\r\n\r\nexport default mergeSort;","// algorithm from https://www.guru99.com/quicksort-in-javascript.html\r\n \r\n const QuickSort = (array, position, steps, colors) => {\r\n      console.log(\"in quick sort\")\r\n      the_sort_itself(array, 0, array.length - 1, steps, colors);\r\n      colors[colors.length - 1] = new Array(array.length).fill(2);\r\n};\r\n\r\n\r\nfunction swap(items, leftIndex, rightIndex, steps, colors){\r\n    let colorKey = colors[colors.length - 1].slice();\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n\r\n    steps.push(items.slice());\r\n    colorKey[leftIndex] = 1;\r\n    colorKey[rightIndex] = 1;\r\n    colors.push(colorKey.slice());\r\n    colorKey[leftIndex] = 0;\r\n    colorKey[rightIndex] = 0;\r\n}\r\n\r\nfunction partition(items, left, right, steps, colors) {\r\n    let colorKey = colors[colors.length - 1].slice();\r\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    while (i <= j) {\r\n        while (items[i] < pivot) {\r\n            i++;\r\n        }\r\n        while (items[j] > pivot) {\r\n            j--;\r\n        }\r\n        if (i <= j) {\r\n            swap(items, i, j, steps, colors); //sawpping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction the_sort_itself(array, left, right, steps, colors) {\r\n    let colorKey = colors[colors.length - 1].slice();\r\n    var index;\r\n    if (array.length > 1) {\r\n        index = partition(array, left, right, steps, colors); //index returned from partition\r\n        if (left < index - 1) { //more elements on the left side of the pivot\r\n            the_sort_itself(array, left, index - 1, steps, colors);\r\n            steps.push(array.slice());\r\n            colorKey[left] = 1;\r\n            colorKey[index-1] = 1;\r\n            colors.push(colorKey.slice());\r\n            colorKey[left] = 0;\r\n            colorKey[index-1] = 0;\r\n        }\r\n        if (index < right) { //more elements on the right side of the pivot\r\n            the_sort_itself(array, index, right, steps, colors);\r\n            steps.push(array.slice());\r\n            colorKey[index] = 1;\r\n            colorKey[right] = 1;\r\n            colors.push(colorKey.slice());\r\n            colorKey[index] = 0;\r\n            colorKey[right] = 0;\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport default QuickSort;","  const HeapSort = (arr, position, steps, colors) => {\r\n      console.log(\"in heap sort\")\r\n\r\n      var n = arr.length;\r\n \r\n      // Build heap (rearrange array)\r\n      for (var i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n          heapify(arr, n, i, position, steps, colors);\r\n          console.log(\"building heap\")\r\n      // One by one extract an element from heap\r\n      for (var i = n - 1; i >= 0; i--) {\r\n          // Move current root to end\r\n          var temp = arr[0];\r\n          arr[0] = arr[i];\r\n          arr[i] = temp;\r\n\r\n          console.log(\"call max heapify\")\r\n          // call max heapify on the reduced heap\r\n          heapify(arr, i, 0, position, steps, colors);\r\n      }\r\n    colors[colors.length - 1] = new Array(arr.length).fill(2);   \r\n    return;\r\n};\r\n\r\nconst heapify = (arr, n, i, position, steps, colors) =>\r\n{\r\n  console.log(\"in heapify\")\r\n  let colorKey = colors[colors.length - 1].slice();\r\n    var largest = i; // Initialize largest as root\r\n    var l = 2 * i + 1; // left = 2*i + 1\r\n    var r = 2 * i + 2; // right = 2*i + 2\r\n\r\n    // If left child is larger than root\r\n    if (l < n && arr[l] > arr[largest])\r\n        largest = l;\r\n\r\n    // If right child is larger than largest so far\r\n    if (r < n && arr[r] > arr[largest])\r\n        largest = r;\r\n\r\n    // If largest is not root\r\n    if (largest != i) {\r\n        var swap = arr[i];\r\n        arr[i] = arr[largest];\r\n        arr[largest] = swap;\r\n\r\n        // Recursively heapify the affected sub-tree\r\n        heapify(arr, n, largest, position, steps, colors);\r\n    }\r\n    steps.push(arr.slice());\r\n    colorKey[largest] = 1;\r\n    colorKey[largest + 1] = 1;\r\n    colors.push(colorKey.slice());\r\n    colorKey[largest] = 0;\r\n    colorKey[largest + 1] = 0;\r\n}\r\n\r\n\r\nexport default HeapSort;\r\n","const none = (array, position, steps, colors) => {\r\n  return;\r\n};\r\n\r\n\r\nexport default none;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BubbleSort from './Algorithms/BubbleSort';\nimport MergeSort from './Algorithms/MergeSort';\nimport QuickSort from './Algorithms/QuickSort';\nimport HeapSort from './Algorithms/HeapSort';\nimport none from './Algorithms/none';\n\n\nclass Page extends React.Component{\n    render(){\n        return (\n                <BarGraph/>\n          );\n    }\n}\n\n \nclass BarGraph extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n            steps: [],\n            colorKey: [],\n            colors: [],\n            timeouts: [],\n            currentStep: 0,\n            count: 100,\n            delay: 50,\n            algorithm: \"none\"\n        }\n    };\n\n    ALGORITHMS = {\n        'none' : none,\n\t\t'Bubble Sort': BubbleSort,\n\t\t'Merge Sort': MergeSort,\n\t\t'Quick Sort': QuickSort,\n        'Heap Sort': HeapSort,\n\t};\n\n\n    componentDidMount = () => {\n        this.resetArray();\n    };\n\n    getInt = (min, max) => {\n        return Math.floor(Math.random() * max) + min;\n    };\n\n    resetArray = () => {\n        console.log(\"reset\")\n        this.clearTimeouts();\n        this.clearColorKey();\n\n        let count = this.state.count;\n        const array = [];\n\n        for (let i = 0; i<count; i++){\n            array.push(this.getInt(5,500));\n        }\n        this.setState({\n            array: array, \n            steps: [array], \n            count: count,\n            currentStep: 0,\n        }, () => this.generateSteps());\n    };\n\n    generateSteps = () => {\n\t\tlet array = this.state.array.slice();\n\t\tlet steps = this.state.steps.slice();\n\t\tlet colors = this.state.colors.slice();\n        let algorithm = this.state.algorithm;\n\n        console.log(algorithm)\n        this.ALGORITHMS[this.state.algorithm](array, 0, steps, colors);\n\n\t\tthis.setState({\n\t\t\tsteps: steps,\n\t\t\tcolors: colors,\n\t\t});\n\t};\n\n\n    handleStart = (alg) => {\n\t\tlet steps = this.state.steps;\n\t\tlet colors = this.state.colors;\n\t\tthis.clearTimeouts();\n        this.clearColorKey();\n\t\tlet timeouts = [];\n\n\t\tlet i = 0;\n\t\twhile (i < steps.length - this.state.currentStep) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tlet currentStep = this.state.currentStep;\n\t\t\t\tthis.setState({\n\t\t\t\t\tarray: steps[currentStep],\n\t\t\t\t\tcolorKey: colors[currentStep],\n\t\t\t\t\tcurrentStep: currentStep + 1\n\t\t\t\t});\n\t\t\t\ttimeouts.push(timeout);\n\t\t\t}, this.state.delay * i);\n\t\t\ti++;\n\t\t}\n\n\t\tthis.setState({\n\t\t\ttimeouts: timeouts,\n            algorithm: alg\n\t\t}, () => this.generateSteps());\n    };\n\n    clearTimeouts = () => {\n        this.state.timeouts.forEach(timeouts => clearTimeout(timeouts));\n        this.setState({timeouts: []});\n    };\n\n    clearColorKey= () => {\n        let blank = new Array(this.state.count).fill(0);\n        this.setState({colorKey: blank, colors: [blank]})\n    };\n\n\n  render() {\n    const count = this.state.count;\n    const colors = ['#3d5af1', '#ff304f', '#83e85a'];\n\n    return(\n        \n        <div className = \"container\" style = {{ \n            position: 'absolute', \n            width: '100%', \n            margin: '0px', \n            left: '0px',\n            background: '#F2F4FF', \n            top: '0',\n            height: '80%'\n        }}>\n\n            <header style = {{background: '#4CAF50', padding: '10px', margin: '0 0 20px', align: 'center', boxShadow: '5px 5px #D3D3D3'}}>\n                <button onClick = {() => this.resetArray()}>Randomize!</button>\n                <button className = \"alg\"  onClick = {() => {this.setState({algorithm: \"Merge Sort\"}, () => this.handleStart(\"Merge Sort\"));}}>Merge Sort</button>\n                <button className = \"alg\"  onClick = {() => {this.setState({algorithm: \"Bubble Sort\"}, () => this.handleStart(\"Bubble Sort\")); }}>Bubble Sort</button>\n                <button className = \"alg\"  onClick = {() => {this.setState({algorithm: \"Quick Sort\"}, () => this.handleStart(\"Quick Sort\")); }}>Quick Sort</button>\n                <button className = \"alg\"  onClick = {() => {this.setState({algorithm: \"Heap Sort\"}, () => this.handleStart(\"Heap Sort\")); }}>Heap Sort</button>\n                <button onClick = {() => this.handleStart(this.state.algorithm)} style = {{borderLeft: '5px black solid'}}>Start</button>\n            </header>\n\n            <div className = \"body\" style = {{\n\n                align: 'left', \n                background: '#F2F4FF',\n                width: '95%',\n                margin: '2.5%',\n                height: '100%',\n                borderBottom: '4px dotted blue'\n                }}>\n\n                {this.state.array.map((value, idx) =>(\n                    <div className = \"array-bar\" key = {idx}\n                        style={{\n                            backgroundColor: colors[this.state.colorKey[idx]],\n                            height: `${value}px`,\n                            width: `${100/count-(.40*(100/count))}%`,\n                            margin: `${(.2*(100/count))}%`,\n                            display: 'inline-block'\n                        }}>\n                    </div>\n\n                ))}\n\n            </div>\n\n            <footer style = {{background: '#F2F4FF', fontFamily: 'Trebuchet MS, sans-serif'}}> \n                    <h1 style = {{textAlign: 'center'}}>Patrycja Bachleda    |      September 18, 2021</h1>\n            </footer>\n\n        </div>\n    ) \n  }\n}\n \nReactDOM.render(<Page />, document.getElementById('root'));"],"sourceRoot":""}